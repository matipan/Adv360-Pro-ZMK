#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        super_up: super_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LG(UP_ARROW)>;
            label = "SUPER_UP";
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kt>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <66>;
            tapping-term-ms = <200>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE       &kp N1       &kp N2  &kp N3    &kp N4     &kp N5  &kp K_COPY                                                                               &kp K_PASTE      &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp F11
&kp LEFT_BRACE  &kp Q        &kp W   &kp E     &kp R      &kp T   &kp LEFT_BRACE                                                                           &kp RIGHT_BRACE  &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&mo 2           &kp A        &kp S   &kp D     &kp F      &kp G   &kp ESCAPE      &kp RIGHT_CONTROL  &kp RIGHT_ALT         &kp LEFT_CONTROL  &kp LEFT_ALT  &none            &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp ESCAPE      &kp Z        &kp X   &kp C     &kp V      &kp B                                      &kp LEFT_COMMAND      &kp PG_UP                                        &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp MINUS
&kp LEFT_SHIFT  &kp LG(TAB)  &mo 1   &kp LEFT  &kp RIGHT          &hm LCTRL TAB   &kp BACKSPACE      &kp LEFT_SHIFT        &kp EQUAL         &kp ENTER     &kp SPACE                &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 3
            >;
        };

        functions {
            bindings = <
&kp EQUAL  &kp F1      &kp F2      &kp F3      &kp F4      &kp F5      &kp F6                                                     &kp F7      &kp F8      &kp F9      &kp F10      &kp F11      &kp F12      &kp MINUS
&kp TAB    &kp LA(F1)  &kp LA(F2)  &kp LA(F3)  &kp LA(F4)  &kp LA(F5)  &kp LA(F6)                                                 &kp LA(F7)  &kp LA(F8)  &kp LA(F9)  &kp LA(F10)  &kp LA(F11)  &kp LA(F12)  &kp BSLH
&none      &none       &none       &none       &none       &none       &none       &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none       &none       &none       &none        &none        &none        &kp SQT
&kp LSHFT  &none       &none       &none       &none       &none                              &kp HOME      &kp PG_UP                         &none       &none       &none        &none        &none        &none
&mo 0      &kp GRAVE   &kp CAPS    &kp LEFT    &kp RIGHT               &kp BSPC    &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0               &kp UP      &kp DOWN     &none        &none        &none
            >;
        };

        symbols {
            bindings = <
&trans  &trans     &trans     &trans  &trans      &trans       &kp K_COPY                                                            &trans  &trans            &trans       &trans                &trans                 &trans      &trans
&trans  &kp LG(Q)  &kp LG(M)  &trans  &trans      &kp LG(T)    &trans                                                                &trans  &kp LESS_THAN     &kp AT_SIGN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HASH    &trans
&trans  &trans     &trans     &trans  &bl BL_TOG  &bl BL_INC   &bl BL_DEC        &bt BT_PRV      &bt BT_NXT      &trans  &trans      &trans  &kp GREATER_THAN  &kp EQUAL    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR  &kp LG(LC(UP_ARROW))
&trans  &trans     &trans     &trans  &bt BT_CLR  &bootloader                                    &bt BT_CLR      &trans                      &kp TILDE         &kp GRAVE    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE    &kp LG(LC(DOWN))
&trans  &trans     &trans     &trans  &trans                   &kp K_PLAY_PAUSE  &kp K_PREVIOUS  &trans          &trans  &kp K_NEXT  &trans                    &trans       &trans                &trans                 &trans      &trans
            >;
        };

        mod {
            bindings = <
&none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &none  &none                                            &trans           		&none  &none         &none         &none         &none  &none
&none  &none             &none             &none             &none             &none  &none                                            &none            		&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none
&none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &none  &none  &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5 	&none  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none  &none
&none  &none             &none             &none             &none             &none                &none      &none                                    &none  	&kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none  &none
&none  &none             &none             &none             &none                    &none  &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG         	&none         &kp N0        &none         &none  &none
            >;
        };
    };
};
